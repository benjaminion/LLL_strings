(seq

  (include "strings.lll")

  ;; Precomputed function IDs.
  (def 'do-compare          0x3da0ac79) ; compare()
  (def 'do-compare-loop     0x20a533b0) ; compareLoop()
  (def 'do-compare-strings  0xde6d7f88) ; compareStrings(string,string,int256)
  (def 'do-len-bytes32      0x2aafd70a) ; lenBytes32()
  (def 'do-len-bytes32-loop 0xb1eabc02) ; lenBytes32Loop()

  ;; Memory layout
  ;;   - from  0x00 to  0xff: Strings library working memory
  ;;   - from 0x100 to 0x1ff: This code's working memory
  ;;   - from 0x200         : Available to alloc
  (def 'mem-func  0x100) ; Storage for the function selector.
  (def 'slice1_p  0x120) ; A pointer to a slice
  (def 'slice2_p  0x140) ; A pointer to a slice
  (def 'scratch0  0x160) ; Temporary storage
  (def 'scratch1  0x180) ; Temporary storage
  (def 'scratch2  0x1a0) ; Temporary storage
  (def 'scratch3  0x1c0) ; Temporary storage
  (def 'gas       0x1e0) ; Gas counter
  (def 'mem-alloc 0x200) ; The base of allocatable memory

  ;; Sets the MSIZE to the base of the allocatable memory
  (def 'uses-alloc
    (pop (mload (- mem-alloc 0x20))))

  ;; Function call handling.
  (def 'function (function-hash code-body)
    (when (= (mload mem-func) function-hash)
      code-body))

  (def 'uses-functions
    (mstore
      mem-func
      (shr (calldataload 0x00) 224)))

  ;; Exit nicely in case of errors in calling or parameters.
  (def 'revert () (revert 0 0))

  (def 'not-payable
    (when (callvalue) (revert)))

  ;; Returns the gas used by EXPR (plus a tiny bit used by the macro)
  (def 'return-gas (expr) (return (seq [gas]:(gas) expr (- @gas (gas)))))

  ;; Useful for debugging - return the whole allocated memory.
  (def 'break () (return 0x00 (msize)))

  ;; Evals to 0 for n=0, 1 for n>0, -1 for n<0
  (def 'sign (n) (- (S> n 0) (S< n 0)))

  ;; If expr evals to true ok, otherwise break
  (def 'assert (expr) (unless expr (break)))
  
  ;; --------------------------------------------------------------------------
  ;; CONTRACT CODE
  
  (returnlll
    (seq not-payable uses-functions uses-alloc

      ;; ---------------------------------------------------------------------
      ;; Use a loop to run Compare against the test cases
      ;;
      ;; This version compiles to a much smaller bytecode than do-compare,
      ;; but there is a significant overhead from all the loop management.

      (function do-compare-loop
        (return-gas

          (seq
            (pop (mload 0x6e0)) ; Need more working memory for this one
            
            (def 'base 0x200)
            ;; Test 1
            [base]          :0x00 ; Equal
            [(+ base 0x20)] :(lit (+ base 0x40)  "foobie")
            [(+ base 0x60)] :(lit (+ base 0x80)  "foobie")

            ;; Test 2
            [(+ base 0xa0)] :(~ 0) ; LT
            [(+ base 0xc0)] :(lit (+ base 0xe0)  "foobie")
            [(+ base 0x100)]:(lit (+ base 0x120)  "foobif")

            ;; Test 3
            [(+ base 0x140)]:0x01 ; GT
            [(+ base 0x160)]:(lit (+ base 0x180) "foobie")
            [(+ base 0x1a0)]:(lit (+ base 0x1c0) "foobid")
          
            ;; Test 4
            [(+ base 0x1e0)]:(~ 0) ; LT
            [(+ base 0x200)]:(lit (+ base 0x220) "foobie")
            [(+ base 0x240)]:(lit (+ base 0x260) "foobies")
          
            ;; Test 5
            [(+ base 0x280)]:0x01 ; GT
            [(+ base 0x2a0)]:(lit (+ base 0x2c0) "foobie")
            [(+ base 0x2e0)]:(lit (+ base 0x300) "foobi")
          
            ;; Test 6
            [(+ base 0x320)]:0x01 ; GT
            [(+ base 0x340)]:(lit (+ base 0x360) "foobie")
            [(+ base 0x380)]:(lit (+ base 0x3a0) "doobie")
          
            ;; Test 7 - this overflows, but as it is the last it matters not.
            [(+ base 0x3c0)]:(~ 0) ; LT
            [(+ base 0x3e0)]:(lit (+ base 0x400) "01234567890123456789012345678901")
            [(+ base 0x420)]:(lit (+ base 0x440) "012345678901234567890123456789012")
          
            [slice1_p]:(new-slice)
            [slice2_p]:(new-slice)

            [scratch0]:base
            (while (<= @scratch0 (+ base 0x3c0))
              (seq
                (set-slice-len @slice1_p (mload (+ @scratch0 0x20)))
                (set-slice-ptr @slice1_p (+ @scratch0 0x40))
                (set-slice-len @slice2_p (mload (+ @scratch0 0x60)))
                (set-slice-ptr @slice2_p (+ @scratch0 0x80))
                ;; Do the compare.
                [scratch1]:(compare @slice1_p @slice2_p)
                (unless
                  (= (mload @scratch0) (sign @scratch1))
                  (break))
                (inc scratch0 0xa0)
                ))
            )))

      (revert))))
