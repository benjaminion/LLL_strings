(seq

  (include "strings.lll")

  ;; Precomputed function IDs.
  (def 'do-compare          0x3da0ac79) ; compare()
  (def 'do-compare-loop     0x20a533b0) ; compareLoop()
  (def 'do-compare-strings  0xde6d7f88) ; compareStrings(string,string,int256)
  (def 'do-len-bytes32      0x2aafd70a) ; lenBytes32()
  (def 'do-len-bytes32-loop 0xb1eabc02) ; lenBytes32Loop()

  ;; Memory layout
  ;;   - from  0x00 to  0xff: Strings library working memory
  ;;   - from 0x100 to 0x1ff: This code's working memory
  ;;   - from 0x200         : Available to alloc
  (def 'mem-func  0x100) ; Storage for the function selector.
  (def 'gas       0x120) ; Gas counter
  (def 'mem-alloc 0x140) ; The base of allocatable memory

  ;; Sets the MSIZE to the base of the allocatable memory
  (def 'uses-alloc
    (pop (mload (- mem-alloc 0x20))))

  ;; Function call handling.
  (def 'function (function-hash code-body)
    (when (= (mload mem-func) function-hash)
      code-body))

  (def 'uses-functions
    (mstore
      mem-func
      (shr (calldataload 0x00) 224)))

  ;; Exit nicely in case of errors in calling or parameters.
  (def 'revert () (revert 0 0))

  (def 'not-payable
    (when (callvalue) (revert)))

  ;; Returns the gas used by EXPR (plus a tiny bit used by the macro)
  (def 'return-gas (expr) (return (seq [gas]:(gas) expr (- @gas (gas)))))

  ;; Useful for debugging - return the whole allocated memory.
  (def 'break () (return 0x00 (msize)))

  ;; Evals to 0 for n=0, 1 for n>0, -1 for n<0
  (def 'sign (n) (- (S> n 0) (S< n 0)))

  ;; If expr evals to true ok, otherwise break
  (def 'assert (expr) (unless expr (break)))
  
  ;; --------------------------------------------------------------------------
  ;; CONTRACT CODE
  
  (returnlll
    (seq not-payable uses-functions uses-alloc

      (function do-len-bytes32
        (return-gas
          (seq
            (assert (= 0 (len-bytes32 0x0000000000000000000000000000000000000000000000000000000000000000)))
            (assert (= 1 (len-bytes32 0x4200000000000000000000000000000000000000000000000000000000000000)))
            (assert (= 2 (len-bytes32 0x4242000000000000000000000000000000000000000000000000000000000000)))
            (assert (= 3 (len-bytes32 0x4242420000000000000000000000000000000000000000000000000000000000)))
            (assert (= 4 (len-bytes32 0x4242424200000000000000000000000000000000000000000000000000000000)))
            (assert (= 5 (len-bytes32 0x4242424242000000000000000000000000000000000000000000000000000000)))
            (assert (= 6 (len-bytes32 0x4242424242420000000000000000000000000000000000000000000000000000)))
            (assert (= 7 (len-bytes32 0x4242424242424200000000000000000000000000000000000000000000000000)))
            (assert (= 8 (len-bytes32 0x4242424242424242000000000000000000000000000000000000000000000000)))
            (assert (= 9 (len-bytes32 0x4242424242424242420000000000000000000000000000000000000000000000)))
            (assert (= 10 (len-bytes32 0x4242424242424242424200000000000000000000000000000000000000000000)))
            (assert (= 11 (len-bytes32 0x4242424242424242424242000000000000000000000000000000000000000000)))
            (assert (= 12 (len-bytes32 0x4242424242424242424242420000000000000000000000000000000000000000)))
            (assert (= 13 (len-bytes32 0x4242424242424242424242424200000000000000000000000000000000000000)))
            (assert (= 14 (len-bytes32 0x4242424242424242424242424242000000000000000000000000000000000000)))
            (assert (= 15 (len-bytes32 0x4242424242424242424242424242420000000000000000000000000000000000)))
            (assert (= 16 (len-bytes32 0x4242424242424242424242424242424200000000000000000000000000000000)))
            (assert (= 17 (len-bytes32 0x4242424242424242424242424242424242000000000000000000000000000000)))
            (assert (= 18 (len-bytes32 0x4242424242424242424242424242424242420000000000000000000000000000)))
            (assert (= 19 (len-bytes32 0x4242424242424242424242424242424242424200000000000000000000000000)))
            (assert (= 20 (len-bytes32 0x4242424242424242424242424242424242424242000000000000000000000000)))
            (assert (= 21 (len-bytes32 0x4242424242424242424242424242424242424242420000000000000000000000)))
            (assert (= 22 (len-bytes32 0x4242424242424242424242424242424242424242424200000000000000000000)))
            (assert (= 23 (len-bytes32 0x4242424242424242424242424242424242424242424242000000000000000000)))
            (assert (= 24 (len-bytes32 0x4242424242424242424242424242424242424242424242420000000000000000)))
            (assert (= 25 (len-bytes32 0x4242424242424242424242424242424242424242424242424200000000000000)))
            (assert (= 26 (len-bytes32 0x4242424242424242424242424242424242424242424242424242000000000000)))
            (assert (= 27 (len-bytes32 0x4242424242424242424242424242424242424242424242424242420000000000)))
            (assert (= 28 (len-bytes32 0x4242424242424242424242424242424242424242424242424242424200000000)))
            (assert (= 29 (len-bytes32 0x4242424242424242424242424242424242424242424242424242424242000000)))
            (assert (= 30 (len-bytes32 0x4242424242424242424242424242424242424242424242424242424242420000)))
            (assert (= 31 (len-bytes32 0x4242424242424242424242424242424242424242424242424242424242424200)))
            (assert (= 32 (len-bytes32 0x4242424242424242424242424242424242424242424242424242424242424242)))
            )))
      
      (revert))))
