(seq

  (include "strings.lll")

  ;; Precomputed function IDs.
  (def 'do-compare          0x3da0ac79) ; compare()
  (def 'do-compare-loop     0x20a533b0) ; compareLoop()
  (def 'do-compare-strings  0xde6d7f88) ; compareStrings(string,string,int256)
  (def 'do-len-bytes32      0x2aafd70a) ; lenBytes32()
  (def 'do-len-bytes32-loop 0xb1eabc02) ; lenBytes32Loop()

  ;; Memory layout
  ;;   - from  0x00 to  0xff: Strings library working memory
  ;;   - from 0x100 to 0x1ff: This code's working memory
  ;;   - from 0x200         : Available to alloc
  (def 'mem-func  0x100) ; Storage for the function selector.
  (def 'slice1_p  0x120) ; A pointer to a slice
  (def 'slice2_p  0x140) ; A pointer to a slice
  (def 'scratch0  0x160) ; Temporary storage
  (def 'scratch1  0x180) ; Temporary storage
  (def 'scratch2  0x1a0) ; Temporary storage
  (def 'scratch3  0x1c0) ; Temporary storage
  (def 'gas       0x1e0) ; Gas counter
  (def 'mem-alloc 0x200) ; The base of allocatable memory

  ;; Sets the MSIZE to the base of the allocatable memory
  (def 'uses-alloc
    (pop (mload (- mem-alloc 0x20))))

  ;; Function call handling.
  (def 'function (function-hash code-body)
    (when (= (mload mem-func) function-hash)
      code-body))

  (def 'uses-functions
    (mstore
      mem-func
      (shr (calldataload 0x00) 224)))

  ;; Exit nicely in case of errors in calling or parameters.
  (def 'revert () (revert 0 0))

  (def 'not-payable
    (when (callvalue) (revert)))

  ;; Returns the gas used by EXPR (plus a tiny bit used by the macro)
  (def 'return-gas (expr) (return (seq [gas]:(gas) expr (- @gas (gas)))))

  ;; Useful for debugging - return the whole allocated memory.
  (def 'break () (return 0x00 (msize)))

  ;; Evals to 0 for n=0, 1 for n>0, -1 for n<0
  (def 'sign (n) (- (S> n 0) (S< n 0)))

  ;; If expr evals to true ok, otherwise break
  (def 'assert (expr) (unless expr (break)))
  
  ;; --------------------------------------------------------------------------
  ;; CONTRACT CODE
  
  (returnlll
    (seq not-payable uses-functions uses-alloc

      ;; ---------------------------------------------------------------------
      ;; Sequentially run Compare against the test cases
      ;;
      ;; This better mimics the Solidity version, but compiles to a big
      ;; bytecode due the the repeated expansions of the "compare" macro.
      
      (function do-compare
        (return-gas

          (seq
            [slice1_p]:(new-slice)
            [slice2_p]:(new-slice)

            ;; Max string length in these tests is 64 bytes
            (set-slice-ptr @slice1_p (alloc 0x40))
            (set-slice-ptr @slice2_p (alloc 0x40))

            ;; Test 1
            (set-slice-len @slice1_p (lit (get-slice-ptr @slice1_p) "foobie"))
            (set-slice-len @slice2_p (lit (get-slice-ptr @slice2_p) "foobie"))
            [scratch1]:(compare @slice1_p @slice2_p)
            (unless
              (! @scratch1)
              (break))

            ;; Test 2
            (set-slice-len @slice1_p (lit (get-slice-ptr @slice1_p) "foobie"))
            (set-slice-len @slice2_p (lit (get-slice-ptr @slice2_p) "foobif"))
            [scratch1]:(compare @slice1_p @slice2_p)
            (unless
              (= (~ 0) (sign @scratch1))
              (break))

            ;; Test 3
            (set-slice-len @slice1_p (lit (get-slice-ptr @slice1_p) "foobie"))
            (set-slice-len @slice2_p (lit (get-slice-ptr @slice2_p) "foobid"))
            [scratch1]:(compare @slice1_p @slice2_p)
            (unless
              (= 1 (sign @scratch1))
              (break))

            ;; Test 4
            (set-slice-len @slice1_p (lit (get-slice-ptr @slice1_p) "foobie"))
            (set-slice-len @slice2_p (lit (get-slice-ptr @slice2_p) "foobies"))
            [scratch1]:(compare @slice1_p @slice2_p)
            (unless
              (= (~ 0) (sign @scratch1))
              (break))

            ;; Test 5
            (set-slice-len @slice1_p (lit (get-slice-ptr @slice1_p) "foobie"))
            (set-slice-len @slice2_p (lit (get-slice-ptr @slice2_p) "foobi"))
            [scratch1]:(compare @slice1_p @slice2_p)
            (unless
              (= 1 (sign @scratch1))
              (break))

            ;; Test 6
            (set-slice-len @slice1_p (lit (get-slice-ptr @slice1_p) "foobie"))
            (set-slice-len @slice2_p (lit (get-slice-ptr @slice2_p) "doobie"))
            [scratch1]:(compare @slice1_p @slice2_p)
            (unless
              (= 1 (sign @scratch1))
              (break))

            ;; Test 7
            (set-slice-len @slice1_p (lit (get-slice-ptr @slice1_p) "01234567890123456789012345678901"))
            (set-slice-len @slice2_p (lit (get-slice-ptr @slice2_p) "012345678901234567890123456789012"))
            [scratch1]:(compare @slice1_p @slice2_p)
            (unless
              (= (~ 0) (sign @scratch1))
              (break))
            )))

      (revert))))
