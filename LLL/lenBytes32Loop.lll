(seq

  (include "strings.lll")

  ;; Precomputed function IDs.
  (def 'do-compare          0x3da0ac79) ; compare()
  (def 'do-compare-loop     0x20a533b0) ; compareLoop()
  (def 'do-compare-strings  0xde6d7f88) ; compareStrings(string,string,int256)
  (def 'do-len-bytes32      0x2aafd70a) ; lenBytes32()
  (def 'do-len-bytes32-loop 0xb1eabc02) ; lenBytes32Loop()

  ;; Memory layout
  ;;   - from  0x00 to  0xff: Strings library working memory
  ;;   - from 0x100 to 0x17f: This code's working memory
  ;;   - from 0x180         : Available to alloc
  (def 'mem-func  0x100) ; Storage for the function selector.
  (def 'scratch0  0x120) ; Temporary storage
  (def 'scratch1  0x140) ; Temporary storage
  (def 'gas       0x160) ; Gas counter
  (def 'mem-alloc 0x180) ; The base of allocatable memory

  ;; Sets the MSIZE to the base of the allocatable memory
  (def 'uses-alloc
    (pop (mload (- mem-alloc 0x20))))

  ;; Function call handling.
  (def 'function (function-hash code-body)
    (when (= (mload mem-func) function-hash)
      code-body))

  (def 'uses-functions
    (mstore
      mem-func
      (shr (calldataload 0x00) 224)))

  ;; Exit nicely in case of errors in calling or parameters.
  (def 'revert () (revert 0 0))

  (def 'not-payable
    (when (callvalue) (revert)))

  ;; Returns the gas used by EXPR (plus a tiny bit used by the macro)
  (def 'return-gas (expr) (return (seq [gas]:(gas) expr (- @gas (gas)))))

  ;; Useful for debugging - return the whole allocated memory.
  (def 'break () (return 0x00 (msize)))

  ;; Evals to 0 for n=0, 1 for n>0, -1 for n<0
  (def 'sign (n) (- (S> n 0) (S< n 0)))

  ;; If expr evals to true ok, otherwise break
  (def 'assert (expr) (unless expr (break)))
  
  ;; --------------------------------------------------------------------------
  ;; CONTRACT CODE
  
  (returnlll
    (seq not-payable uses-functions uses-alloc

      (function do-len-bytes32-loop
        (return-gas
          (seq

            [scratch0]:(~ 0) ; bytes32 string
            [scratch1]:32    ; counter

            (while (S>= @scratch1 0)
              (seq
                (assert (= @scratch1 (len-bytes32 @scratch0)))
                (dec scratch1)
                [scratch0]:(* 0x100 @scratch0)))
            )
          )
        )

      (revert))))
